// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs (author, title, body) VALUES ($1, $2, $3) RETURNING id, author, title, body, created_at, updated_at
`

type CreateBlogParams struct {
	Author pgtype.UUID
	Title  string
	Body   string
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog, arg.Author, arg.Title, arg.Body)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFollowRel = `-- name: CreateFollowRel :one
INSERT INTO follow (follower, followee) VALUES ($1, $2) RETURNING id, follower, followee, created_at
`

type CreateFollowRelParams struct {
	Follower pgtype.UUID
	Followee pgtype.UUID
}

func (q *Queries) CreateFollowRel(ctx context.Context, arg CreateFollowRelParams) (Follow, error) {
	row := q.db.QueryRow(ctx, createFollowRel, arg.Follower, arg.Followee)
	var i Follow
	err := row.Scan(
		&i.ID,
		&i.Follower,
		&i.Followee,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name) VALUES ($1) RETURNING id, user_name, created_at
`

func (q *Queries) CreateUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, userName)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.CreatedAt)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blogs WHERE id = $1
`

func (q *Queries) DeleteBlog(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlog, id)
	return err
}

const deleteFollowRel = `-- name: DeleteFollowRel :exec
DELETE FROM follow where follower = $1 and followee = $2
`

type DeleteFollowRelParams struct {
	Follower pgtype.UUID
	Followee pgtype.UUID
}

func (q *Queries) DeleteFollowRel(ctx context.Context, arg DeleteFollowRelParams) error {
	_, err := q.db.Exec(ctx, deleteFollowRel, arg.Follower, arg.Followee)
	return err
}

const updateBlog = `-- name: UpdateBlog :one
UPDATE blogs 
SET
  title = $2,
  body = $3
WHERE id = $1 RETURNING id, author, title, body, created_at, updated_at
`

type UpdateBlogParams struct {
	ID    pgtype.UUID
	Title string
	Body  string
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlog, arg.ID, arg.Title, arg.Body)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
